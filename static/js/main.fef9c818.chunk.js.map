{"version":3,"sources":["types.tsx","components/TaskItem.tsx","components/TaskColumn.tsx","ChallengeComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TaskStatus","TaskItem","_ref","task","moveTask","_jsxs","style","display","alignItems","padding","margin","minHeight","backgroundColor","borderRadius","boxShadow","wordBreak","children","_jsx","onClick","id","disabled","status","Todo","color","border","marginRight","flexShrink","cursor","flex","text","Done","marginLeft","TaskColumn","tasks","columnTasks","filter","minWidth","map","ChallengeComponent","setTasks","useState","InProgress","newTaskText","setNewTaskText","statusOrder","taskId","direction","currentTasks","currentIndex","indexOf","newIndex","Math","min","length","max","gap","marginBottom","flexWrap","justifyContent","onSubmit","e","preventDefault","trim","Date","now","alert","marginTop","type","value","onChange","target","placeholder","App","className","flexDirection","width","maxHeight","background","boxSizing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fef9c818.chunk.js","sourcesContent":["export enum TaskStatus {\r\n  Todo = \"Todo\",\r\n  InProgress = \"In Progress\",\r\n  Done = \"Done\",\r\n}\r\n\r\nexport interface Task {\r\n  id: number;\r\n  text: string;\r\n  status: TaskStatus;\r\n}\r\n","import React from \"react\";\r\nimport { Task, TaskStatus } from \"../types\";\r\n\r\ninterface TaskItemProps {\r\n  task: Task;\r\n  moveTask: (taskId: number, direction: \"left\" | \"right\") => void;\r\n}\r\n\r\nexport const TaskItem: React.FC<TaskItemProps> = ({ task, moveTask }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        padding: \"20px\",\r\n        margin: \"10px 0\",\r\n        minHeight: \"60px\",\r\n        backgroundColor: \"white\",\r\n        borderRadius: \"8px\",\r\n        boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\",\r\n        wordBreak: \"break-word\",\r\n      }}\r\n    >\r\n      <button\r\n        onClick={() => moveTask(task.id, \"left\")}\r\n        disabled={task.status === TaskStatus.Todo}\r\n        style={{\r\n          backgroundColor:\r\n            task.status === TaskStatus.Todo ? \"#ffcccb\" : \"#dc3545\",\r\n          color: \"white\",\r\n          border: \"none\",\r\n          padding: \"8px 12px\",\r\n          borderRadius: \"4px\",\r\n          marginRight: \"10px\",\r\n          flexShrink: 0,\r\n          cursor: task.status === TaskStatus.Todo ? \"not-allowed\" : \"pointer\",\r\n        }}\r\n      >\r\n        ←\r\n      </button>\r\n      <span\r\n        style={{\r\n          flex: 1,\r\n          padding: \"0 5px\",\r\n        }}\r\n      >\r\n        {task.text}\r\n      </span>\r\n      <button\r\n        onClick={() => moveTask(task.id, \"right\")}\r\n        disabled={task.status === TaskStatus.Done}\r\n        style={{\r\n          backgroundColor:\r\n            task.status === TaskStatus.Done ? \"#90EE90\" : \"#28a745\",\r\n          color: \"white\",\r\n          border: \"none\",\r\n          padding: \"8px 12px\",\r\n          borderRadius: \"4px\",\r\n          marginLeft: \"10px\",\r\n          flexShrink: 0,\r\n          cursor: task.status === TaskStatus.Done ? \"not-allowed\" : \"pointer\",\r\n        }}\r\n      >\r\n        →\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { TaskStatus, Task } from \"../types\";\r\nimport { TaskItem } from \"./TaskItem\";\r\n\r\ninterface TaskColumnProps {\r\n  status: TaskStatus;\r\n  tasks: Task[];\r\n  moveTask: (taskId: number, direction: \"left\" | \"right\") => void;\r\n}\r\n\r\nexport const TaskColumn: React.FC<TaskColumnProps> = ({\r\n  status,\r\n  tasks,\r\n  moveTask,\r\n}) => {\r\n  const columnTasks = tasks.filter((task) => task.status === status);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        flex: 1,\r\n        padding: \"20px\",\r\n        minWidth: \"250px\",\r\n      }}\r\n    >\r\n      <h2>{status}</h2>\r\n      {columnTasks.map((task) => (\r\n        <TaskItem key={task.id} task={task} moveTask={moveTask} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { TaskStatus, Task } from \"./types\";\r\nimport { TaskColumn } from \"./components/TaskColumn\";\r\n\r\nexport const ChallengeComponent: React.FC = () => {\r\n  const [tasks, setTasks] = useState<Task[]>([\r\n    { id: 1, text: \"Mow The lawn\", status: TaskStatus.Todo },\r\n    { id: 2, text: \"Pull Weeds\", status: TaskStatus.InProgress },\r\n    { id: 3, text: \"Rake the leaves\", status: TaskStatus.Done },\r\n  ]);\r\n\r\n  const [newTaskText, setNewTaskText] = useState(\"\");\r\n\r\n  const statusOrder = [TaskStatus.Todo, TaskStatus.InProgress, TaskStatus.Done];\r\n\r\n  const moveTask = (taskId: number, direction: \"left\" | \"right\") => {\r\n    setTasks((currentTasks) =>\r\n      currentTasks.map((task) => {\r\n        if (task.id === taskId) {\r\n          const currentIndex = statusOrder.indexOf(task.status);\r\n          const newIndex =\r\n            direction === \"right\"\r\n              ? Math.min(currentIndex + 1, statusOrder.length - 1)\r\n              : Math.max(currentIndex - 1, 0);\r\n          return { ...task, status: statusOrder[newIndex] };\r\n        }\r\n        return task;\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!newTaskText.trim()) {\r\n      alert(\"Task cannot be empty\");\r\n      return;\r\n    }\r\n\r\n    setTasks((currentTasks) => [\r\n      ...currentTasks,\r\n      {\r\n        id: Date.now(),\r\n        text: newTaskText.trim(),\r\n        status: TaskStatus.Todo,\r\n      },\r\n    ]);\r\n    setNewTaskText(\"\");\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          gap: \"20px\",\r\n          marginBottom: \"20px\",\r\n          flexWrap: \"wrap\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        {statusOrder.map((status) => (\r\n          <TaskColumn\r\n            key={status}\r\n            status={status}\r\n            tasks={tasks}\r\n            moveTask={moveTask}\r\n          />\r\n        ))}\r\n      </div>\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        style={{\r\n          display: \"flex\",\r\n          gap: \"10px\",\r\n          marginTop: \"20px\",\r\n          padding: \"20px\",\r\n        }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          value={newTaskText}\r\n          onChange={(e) => setNewTaskText(e.target.value)}\r\n          placeholder=\"Add Task\"\r\n          style={{\r\n            padding: \"12px\",\r\n            borderRadius: \"4px\",\r\n            border: \"1px solid #ccc\",\r\n            flex: 1,\r\n          }}\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          style={{\r\n            backgroundColor: \"#007bff\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            padding: \"12px 20px\",\r\n            borderRadius: \"4px\",\r\n            cursor: \"pointer\",\r\n            flexShrink: 0,\r\n          }}\r\n        >\r\n          +\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react'\r\nimport { ChallengeComponent } from './ChallengeComponent'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div style={{ marginLeft: 25, display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n          <h1>Task Management Application</h1>\r\n        </div>\r\n      </header>\r\n      <main\r\n        style={{\r\n          width: 'calc(100vw - 50px)',\r\n          margin: '0 auto',\r\n          maxHeight: '100%',\r\n          background: '#fcfcfc',\r\n          border: '1px solid #000000',\r\n          boxSizing: 'border-box',\r\n          boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.25)',\r\n          borderRadius: 40,\r\n        }}>\r\n        <ChallengeComponent />\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// Add basename to handle GitHub Pages subdirectory\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}